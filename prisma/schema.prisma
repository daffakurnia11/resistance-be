// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum PlayerRoleEnum {
  RESISTANCE
  SPY
}

model Lobby {
  id         String          @id @default(uuid()) @db.Uuid
  created_at DateTime        @default(now()) @db.Timestamptz(6)
  updated_at DateTime        @updatedAt @db.Timestamptz(6)
  deleted_at DateTime?       @db.Timestamptz(6) // Nullable
  room_code  String          @unique @db.Text
  winner     PlayerRoleEnum?
  players    Player[]
  lobby_logs LobbyLog[]
  missions   Mission[]

  @@map(name: "lobbies")
}

model LobbyLog {
  id         String    @id @default(uuid()) @db.Uuid
  player_id  String    @db.Uuid
  lobby_id   String    @db.Uuid
  action     String    @db.VarChar(11)
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @updatedAt @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6) // Nullable

  player Player @relation(fields: [player_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  lobby  Lobby  @relation(fields: [lobby_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("lobby_logs")
}

model Player {
  id              String          @id @default(uuid()) @db.Uuid
  created_at      DateTime        @default(now()) @db.Timestamptz(6)
  updated_at      DateTime        @updatedAt @db.Timestamptz(6)
  deleted_at      DateTime?       @db.Timestamptz(6) // Nullable
  role            PlayerRoleEnum?
  name            String          @db.Text
  lobby           Lobby?          @relation(fields: [lobby_id], references: [id])
  lobby_id        String?         @db.Uuid
  room_role       RoomRole        @default(MEMBER)
  lobby_logs      LobbyLog[]
  missions        Mission[]
  mission_players MissionPlayer[]
  mission_votes   MissionVote[]
  MissionLog      MissionLog[]

  @@map(name: "players")
}

enum MissionStatusEnum {
  OPEN
  ASSIGNING
  VOTING
  IN_PLAY
  CLOSE
}

enum MissionEnum {
  SUCCESS
  FAIL
}

model Mission {
  id              String            @id @default(uuid()) @db.Uuid
  status          MissionStatusEnum @default(OPEN)
  leader          Player            @relation(fields: [leader_id], references: [id])
  lobby           Lobby             @relation(fields: [lobby_id], references: [id])
  result          MissionEnum?
  name            String?           @db.VarChar(255)
  created_at      DateTime          @default(now()) @db.Timestamptz(6)
  updated_at      DateTime          @updatedAt @db.Timestamptz(6)
  deleted_at      DateTime?         @db.Timestamptz(6) // Nullable
  leader_id       String            @db.Uuid
  lobby_id        String            @db.Uuid
  mission_players MissionPlayer[]
  mission_votes   MissionVote[]
  mission_logs    MissionLog[]

  @@map("missions")
}

model MissionLog {
  id         String    @id @default(uuid()) @db.Uuid
  status     String?
  mission_id String    @db.Uuid
  player_id  String    @db.Uuid
  created_at DateTime  @default(now()) @db.Timestamptz(6)
  updated_at DateTime  @updatedAt @db.Timestamptz(6)
  deleted_at DateTime? @db.Timestamptz(6) // Nullable

  player  Player  @relation(fields: [player_id], references: [id])
  mission Mission @relation(fields: [mission_id], references: [id])

  @@map("mission_logs")
}

model MissionPlayer {
  id                String           @id @default(uuid()) @db.Uuid
  player_id         String           @db.Uuid
  mission_id        String           @db.Uuid
  created_at        DateTime         @default(now()) @db.Timestamptz(6)
  updated_at        DateTime         @updatedAt @db.Timestamptz(6)
  deleted_at        DateTime?        @db.Timestamptz(6) // Nullable
  state             MissionEnum?
  player            Player           @relation(fields: [player_id], references: [id])
  mission           Mission          @relation(fields: [mission_id], references: [id])
  mission_vote_logs MissionVoteLog[]

  @@map("mission_players")
}

enum MissionVoteEnum {
  APPROVE
  REJECT
}

model MissionVote {
  id         String          @id @default(uuid()) @db.Uuid
  player_id  String          @db.Uuid // voter
  mission_id String          @db.Uuid
  vote       MissionVoteEnum
  created_at DateTime        @default(now()) @db.Timestamptz(6)
  updated_at DateTime        @updatedAt @db.Timestamptz(6)
  deleted_at DateTime?       @db.Timestamptz(6) // Nullable

  mission           Mission          @relation(fields: [mission_id], references: [id])
  player            Player           @relation(fields: [player_id], references: [id])
  mission_vote_logs MissionVoteLog[]

  @@map("mission_votes")
}

model MissionVoteLog {
  id                String    @id @default(uuid()) @db.Uuid
  mission_vote_id   String    @db.Uuid
  mission_player_id String    @db.Uuid
  created_at        DateTime  @default(now()) @db.Timestamptz(6)
  updated_at        DateTime  @updatedAt @db.Timestamptz(6)
  deleted_at        DateTime? @db.Timestamptz(6) // Nullable

  mission_vote   MissionVote   @relation(fields: [mission_vote_id], references: [id])
  mission_player MissionPlayer @relation(fields: [mission_player_id], references: [id])

  @@map("mission_vote_logs")
}

enum RoomRole {
  MASTER
  MEMBER
}
